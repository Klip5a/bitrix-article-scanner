// Если нужно скачать больше 1000 картинок, то нужно внести изменения в код.
// src/services/automation.js
// import "dotenv/config.js";
// import { Builder, By, until } from "selenium-webdriver";
// import chrome from "selenium-webdriver/chrome.js";
// import path from "path";
// import fs from "fs";
// import cliProgress from "cli-progress";

// import { sleep } from "../utils/sleepUtils.mjs";
// import { extractImageUrls } from "../utils/seleniumUtils.mjs";
// import { downloadImage } from "../utils/httpUtils.mjs";

// const downloadPath = "C:/Users/Менеджер Сайт/Pictures/fabrics";
// const progressFilePath = "./src/progress.json";

// const MAX_RETRIES = 3;
// const RETRY_DELAY = 15000;
// const SELENIUM_URL = process.env.SELENIUM_URL;
// const USERNAME = process.env.USERNAMEADMIN;
// const PASSWORD = process.env.PASSWORDADMIN;
// const TIMEOUT = 60000;

// const PAGE_URLS = [
//   "https://tc-atlant.ru/bitrix/admin/iblock_list_admin.php?IBLOCK_ID=11&type=aspro_lite_catalog&lang=ru&find_section_section=0&internal=true&grid_id=tbl_iblock_list_da446dd48864ca77909741c1a3162b8a&grid_action=pagination&by=has_detail_picture&order=desc&PAGEN_1=1",
//   "https://tc-atlant.ru/bitrix/admin/iblock_list_admin.php?IBLOCK_ID=11&type=aspro_lite_catalog&lang=ru&find_section_section=0&internal=true&grid_id=tbl_iblock_list_da446dd48864ca77909741c1a3162b8a&grid_action=pagination&by=has_detail_picture&order=desc&PAGEN_1=2",
//   "https://tc-atlant.ru/bitrix/admin/iblock_list_admin.php?IBLOCK_ID=11&type=aspro_lite_catalog&lang=ru&find_section_section=0&internal=true&grid_id=tbl_iblock_list_da446dd48864ca77909741c1a3162b8a&grid_action=pagination&by=has_detail_picture&order=desc&PAGEN_1=3",
//   "https://tc-atlant.ru/bitrix/admin/iblock_list_admin.php?IBLOCK_ID=11&type=aspro_lite_catalog&lang=ru&find_section_section=0&internal=true&grid_id=tbl_iblock_list_da446dd48864ca77909741c1a3162b8a&grid_action=pagination&by=has_detail_picture&order=desc&PAGEN_1=4",
// ];

// function loadProgress() {
//   if (fs.existsSync(progressFilePath)) {
//     const data = fs.readFileSync(progressFilePath, "utf-8");
//     return new Set(JSON.parse(data));
//   }
//   return new Set();
// }

// function saveProgress(processedArticles) {
//   fs.writeFileSync(progressFilePath, JSON.stringify(Array.from(processedArticles), null, 2));
// }

// function sanitizeFileName(fileName) {
//   return fileName.replace(/[\/\\?%*:|"<>]/g, "_");
// }

// async function automateLoginAndSearch() {
//   let driver;
//   let attempt = 0;

//   let processedArticles = loadProgress();
//   let results = [];

//   const bar = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);
//   bar.start(PAGE_URLS.length * 100, 0);

//   while (attempt < MAX_RETRIES) {
//     try {
//       driver = await new Builder()
//         .forBrowser("chrome")
//         .setChromeOptions(new chrome.Options())
//         .build();

//       await driver.get(SELENIUM_URL);

//       const currentUrl = await driver.getCurrentUrl();

//       if (currentUrl.includes("#authorize")) {
//         await driver.wait(until.elementLocated(By.name("USER_LOGIN")), TIMEOUT);
//         await driver.wait(until.elementLocated(By.name("USER_PASSWORD")), TIMEOUT);
//         await driver.wait(until.elementLocated(By.css("input.login-btn-green")), TIMEOUT);

//         await sleep(500);
//         await driver.findElement(By.name("USER_LOGIN")).sendKeys(USERNAME);
//         await sleep(500);
//         await driver.findElement(By.name("USER_PASSWORD")).sendKeys(PASSWORD);
//         await driver.findElement(By.css("input.login-btn-green")).click();

//         await driver.wait(until.titleContains("Основной каталог товаров"), TIMEOUT);
//       }

//       for (let pageUrl of PAGE_URLS) {
//         await driver.get(pageUrl);
//         await driver.wait(until.elementsLocated(By.css("tr.main-grid-row")), TIMEOUT);

//         const rows = await driver.findElements(By.css("tr.main-grid-row"));

//         for (let row of rows) {
//           const cells = await row.findElements(By.css("td.main-grid-cell"));
//           if (cells.length > 5) {
//             const details = {
//               title: await cells[2].getText(),
//               article: await cells[5].getText(),
//               detailedPicture: await extractImageUrls(cells[10]),
//               declarationDescription: await cells[11].getText(),
//               detailedDescription: await cells[12].getText(),
//               images: await extractImageUrls(cells[13]),
//               photoGallery: await extractImageUrls(cells[14]),
//             };

//             let color;
//             let duplicates = [];

//             const combinedImages = [...details.images, ...details.photoGallery];

//             const seenUrls = new Set();
//             combinedImages.forEach((imgUrl) => {
//               if (seenUrls.has(imgUrl)) {
//                 duplicates.push(imgUrl);
//               } else {
//                 seenUrls.add(imgUrl);
//               }
//             });

//             if (duplicates.length > 0) {
//               color = "pink";
//             } else if (
//               details.detailedPicture.length > 0 &&
//               details.images.length > 0 &&
//               details.photoGallery.length === 0
//             ) {
//               color = "green";
//             } else if (details.detailedPicture.length > 0 && details.photoGallery.length > 0) {
//               color = "blue";
//             } else if (
//               details.detailedPicture.length === 0 &&
//               details.images.length === 0 &&
//               details.photoGallery.length === 0
//             ) {
//               color = "yellow";
//             } else {
//               color = "red";
//             }

//             if (
//               details.detailedPicture.length > 0 &&
//               (details.images.length > 0 || details.photoGallery.length > 0)
//             ) {
//               const folderPath = path.join(
//                 downloadPath,
//                 `(${details.article}) ${sanitizeFileName(details.title)}`
//               );
//               if (!fs.existsSync(folderPath)) {
//                 fs.mkdirSync(folderPath, { recursive: true });
//               }

//               const seenUrls = new Set();

//               for (let i = 0; i < details.detailedPicture.length; i++) {
//                 if (!seenUrls.has(details.detailedPicture[i])) {
//                   await downloadImage(details.detailedPicture[i], folderPath, i);
//                   seenUrls.add(details.detailedPicture[i]);
//                 }
//               }
//               for (let i = 0; i < details.images.length; i++) {
//                 if (!seenUrls.has(details.images[i])) {
//                   await downloadImage(
//                     details.images[i],
//                     folderPath,
//                     i + details.detailedPicture.length
//                   );
//                   seenUrls.add(details.images[i]);
//                 }
//               }
//               for (let i = 0; i < details.photoGallery.length; i++) {
//                 if (!seenUrls.has(details.photoGallery[i])) {
//                   await downloadImage(
//                     details.photoGallery[i],
//                     folderPath,
//                     i + details.detailedPicture.length
//                   );
//                   seenUrls.add(details.photoGallery[i]);
//                 }
//               }
//             }

//             results.push({ ...details, color, duplicates });
//             processedArticles.add(details.article);
//             saveProgress(processedArticles);
//           }
//         }

//         bar.increment(100);
//       }

//       bar.stop();
//       return results;
//     } catch (error) {
//       if (error.code === "ECONNRESET") {
//         console.error(`Connection reset error occurred: Attempt ${attempt + 1}`);
//       } else {
//         console.error(`Attempt ${attempt + 1} failed:`, error);
//       }

//       attempt++;
//       if (attempt < MAX_RETRIES) {
//         console.log(`Retrying in ${RETRY_DELAY / 1000} seconds...`);
//         await sleep(RETRY_DELAY);
//       } else {
//         throw new Error("Maximum retries reached. Aborting.");
//       }
//     } finally {
//       if (driver) {
//         await driver.quit();
//       }
//     }
//   }
// }

// export { automateLoginAndSearch };

// src/utils/httpUtils.mjs
// function downloadImage(
//   imageUrl,
//   folderPath,
//   index,
//   attempt = 1,
//   maxRetries = 3
// ) {
//   return new Promise((resolve, reject) => {
//     const parsedUrl = new URL(imageUrl);
//     const imageFilePath = path.join(folderPath, `image${index}.jpg`);
//     const imageFile = fs.createWriteStream(imageFilePath);
//     const protocol = parsedUrl.protocol === "https:" ? https : http;

//     const handleError = (error) => {
//       fs.unlink(imageFilePath, () => reject(error));
//     };

//     const handleResponse = (response) => {
//       if (response.statusCode === 200) {
//         response.pipe(imageFile);
//         imageFile.on("finish", () =>
//           imageFile.close(() => resolve(imageFilePath))
//         );
//       } else {
//         handleError(new Error(`Failed to download image: ${imageUrl}`));
//       }
//     };

//     protocol.get(imageUrl, handleResponse).on("error", handleError);

//     imageFile.on("error", async (error) => {
//       if (attempt < maxRetries) {
//         console.log(`Retrying download (attempt ${attempt}): ${imageUrl}`);
//         await sleep(2000);
//         return downloadImage(
//           imageUrl,
//           folderPath,
//           index,
//           attempt + 1,
//           maxRetries
//         );
//       } else {
//         reject(error);
//       }
//     });
//   });
// }
